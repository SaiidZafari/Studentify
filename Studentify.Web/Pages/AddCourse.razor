@page "/courses/add-course/{id}"
@page "/courses/add-course"

@using Studentify.Web.Services
@using Studentify.Models
@using System.Threading.Tasks
@using Studentify.Web.Models
@using AutoMapper;

<div class="lap2Div"></div>

<div class=" container">

    <EditForm Model="@EditCourseModel" OnValidSubmit="HandleValidSubmit" class="pt-5">
        <h3>Add Course</h3>
        <hr />
        <ValidationSummary />
        <div class="form-group row">
            <label for="courseName" class="col-sm-2 col-form-label">
                Name
            </label>
            <div class="col-sm-10">
                <InputText id="courseName" class="form-control" placeholder="Course Name"
                           @bind-Value="EditCourseModel.CourseName" />
                <ValidationMessage For="@(() => EditCourseModel.CourseName)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="description" class="col-sm-2 col-form-label">
                Description
            </label>
            <div class="col-sm-10">
                <InputText id="description" class="form-control" placeholder="Course Description"
                           @bind-Value="EditCourseModel.Description" />
                <ValidationMessage For="@(() => EditCourseModel.Description)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="imageUrl" class="col-sm-2 col-form-label">
                Image URL
            </label>
            <div class="col-sm-10">
                <InputText id="imageUrl" class="form-control" placeholder="Course ImageUrl"
                           @bind-Value="EditCourseModel.ImageUrl" />
                <ValidationMessage For="@(() => EditCourseModel.ImageUrl)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="subjectId" class="col-sm-2 col-form-label">
                Subject ID
            </label>
            <div class="col-sm-10">
                <InputText id="subjectId" class="form-control" placeholder="Course Subject ID"
                           @bind-Value="EditCourseModel.SubjectId" />
                <ValidationMessage For="@(() => EditCourseModel.SubjectId)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="teacherId" class="col-sm-2 col-form-label">
                Teacher ID
            </label>
            <div class="col-sm-10">
                <InputText id="teacherId" class="form-control" placeholder="Course Teacher ID"
                           @bind-Value="EditCourseModel.TeacherId" />
                <ValidationMessage For="@(() => EditCourseModel.TeacherId)" />
            </div>
        </div>
        <button class="btn btn-primary" type="submit">Submit</button>
    </EditForm>
    </div>



    @code {

        [Inject]
        public ICourseService CourseService { get; set; }

        private Course course { get; set; } = new Course();

        public EditCourseModel EditCourseModel { get; set; } = new EditCourseModel();

        public List<Course> Courses { get; set; } = new List<Course>();

        [Parameter]
        public string Id { get; set; }

        [Inject]
        public IMapper Mapper { get; set; }

        [Inject]
        public NavigationManager NavigationManager { get; set; }

        protected async override Task OnInitializedAsync()
        {
            int.TryParse(Id, out int CourseId);

            if (CourseId != 0)
            {
                course = await CourseService.GetCourse(int.Parse(Id));
            }
            else
            {
                course = new Course
                {
                    CourseId = 0,
                    CourseName = "Example course name",
                    Description = "Example course description",
                    ImageUrl = "images/default.png",
                    SubjectId = 1,
                    TeacherId = 1

                };
            }

            Mapper.Map(course, EditCourseModel);
        }

        protected async Task HandleValidSubmit()
        {
            Mapper.Map(EditCourseModel, course);

            if (course.CourseId == 0)
            {
                course = await CourseService.CreateCourse(course);
            }

            if (course != null)
            {
                NavigationManager.NavigateTo("/courses");
            }
        }

    }
